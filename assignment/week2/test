import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score


file_path = "C:/Users/hanyo/Downloads/mobile.csv"  
df = pd.read_csv(file_path)

# 데이터프레임 확인
display(df.head())

# 2. 특징(X)과 레이블(y) 분리
X = df.iloc[:, :-1].values  # 마지막 열을 제외한 모든 열이 특징
y = df.iloc[:, -1].values   # 마지막 열이 레이블

# 3. 데이터 분할 (학습용 80%, 테스트용 20%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4. 데이터 정규화 (SVM과 LR의 성능 향상을 위해 적용)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# 5. 모델 생성 및 학습
models = {
    "Decision Tree": DecisionTreeClassifier(random_state=42),
    "Random Forest": RandomForestClassifier(random_state=42),
    "SVM": SVC(random_state=42),
    "Logistic Regression": LogisticRegression(random_state=42)
}

results = {}

for name, model in models.items():
    model.fit(X_train, y_train)  # 모델 학습
    y_pred = model.predict(X_test)  # 예측
    accuracy = accuracy_score(y_test, y_pred)  # 정확도 계산
    results[name] = accuracy
    print(f"{name} Accuracy: {accuracy:.4f}")

# 6. 결과를 데이터프레임으로 변환 및 출력
results_df = pd.DataFrame(results.items(), columns=["Model", "Accuracy"])
display(results_df)
